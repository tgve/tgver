
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tgver"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "tgver-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('tgver')

Attaching package: ‘tgver’

The following object is masked from ‘package:utils’:

    help

The following object is masked from ‘package:base’:

    version

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("explore_sf")
> ### * explore_sf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: explore_sf
> ### Title: Explore an sf R object using TGVE npm package.
> ### Aliases: explore_sf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D explore_sf()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("explore_sf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_url")
> ### * get_url
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_url
> ### Title: Helper function to generate URLs
> ### Aliases: get_url
> 
> ### ** Examples
> 
> {
+ url = get_url(dark="false")
+ url == "http://127.0.0.1:8000?dark=false"
+ url = get_url()
+ url == "http://127.0.0.1:8000"
+ }
[1] TRUE
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_url", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("help")
> ### * help
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: help
> ### Title: Function to explore available API variables, their types and
> ###   examples of using them in the TGVE
> ### Aliases: help
> 
> ### ** Examples
> 
> {
+ help()
+ }
These are the available list of variables as of version: 1.4.0
 [1] "tooltipColumns"     "defaultURL"         "geographyURL"      
 [4] "geographyColumn"    "column"             "data"              
 [7] "layerName"          "dark"               "viewport"          
[10] "hideChartGenerator" "hideCharts"        
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("help", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("setup")
> ### * setup
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: setup
> ### Title: Setup an instance.
> ### Aliases: setup
> 
> ### ** Examples
> 
> {
+ p = file.path(tempdir(), "tgve")
+ setup(p)
+ }
A TGVE instance has been created at: /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpxzmFUG/working_dir/Rtmpltb4PI/tgve/tgve
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("setup", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tgve")
> ### * tgve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tgve
> ### Title: Open static TGVE instance
> ### Aliases: tgve
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tgve()
> ##D # just get the path of the HTML
> ##D p = tgve(browse = FALSE)
> ##D file.exists(p)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tgve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tgve_server")
> ### * tgve_server
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tgve_server
> ### Title: Start a TGVE instance server
> ### Aliases: tgve_server
> 
> ### ** Examples
> 
> {
+ # this will run the underlying `plumber` instance and block
+ # the R process.
+ # tgve_server()
+ # This will run in the background using `callr`
+ ps = tgve_server(background = TRUE)
+ Sys.sleep(2)
+ ps$kill()
+ }
Attempting to serve TGVE instance from: /var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T//RtmpxzmFUG/working_dir/Rtmpltb4PI/tgve
Running plumber at: http://127.0.0.1/8000
[1] TRUE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tgve_server", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.758 0.131 2.935 0.501 0.091 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
